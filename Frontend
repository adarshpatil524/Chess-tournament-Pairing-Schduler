<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Tournament Scheduler</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: #2c3e50;
            color: white;
            padding: 20px 0;
            text-align: center;
            margin-bottom: 30px;
        }
        
        h1, h2, h3 {
            margin: 0;
        }
        
        .card {
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        button.danger {
            background-color: #e74c3c;
        }
        
        button.danger:hover {
            background-color: #c0392b;
        }
        
        button.success {
            background-color: #2ecc71;
        }
        
        button.success:hover {
            background-color: #27ae60;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        tr:hover {
            background-color: #f0f0f0;
        }
        
        .pairing-card {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .pairing-players {
            flex-grow: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 0 20px;
        }
        
        .vs {
            margin: 0 10px;
            font-weight: bold;
            color: #7f8c8d;
        }
        
        .result-buttons {
            display: flex;
            gap: 5px;
        }
        
        .tab-container {
            margin-bottom: 20px;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-bottom: none;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
        }
        
        .tab.active {
            background-color: white;
            border-bottom: 1px solid white;
            margin-bottom: -1px;
            font-weight: bold;
        }
        
        .tab-content {
            display: none;
            padding: 20px;
            background-color: white;
            border: 1px solid #ddd;
            border-top: none;
            border-radius: 0 0 5px 5px;
        }
        
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <header>
        <h1>Chess Tournament Scheduler</h1>
    </header>
    
    <div class="container">
        <div class="tab-container">
            <div class="tabs">
                <div class="tab active" data-tab="registration">Player Registration</div>
                <div class="tab" data-tab="pairings">Pairings</div>
                <div class="tab" data-tab="standings">Standings</div>
            </div>
            
            <div id="registration" class="tab-content active">
                <div class="card">
                    <h2>Add New Player</h2>
                    <form id="player-form">
                        <div class="form-group">
                            <label for="player-name">Player Name</label>
                            <input type="text" id="player-name" required>
                        </div>
                        <div class="form-group">
                            <label for="player-rating">Rating (Optional)</label>
                            <input type="number" id="player-rating" min="0" max="3000">
                        </div>
                        <button type="submit">Add Player</button>
                    </form>
                </div>
                
                <div class="card">
                    <h2>Registered Players</h2>
                    <div id="players-list">
                        <table id="players-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Rating</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <div style="margin-top: 20px;">
                        <button id="generate-pairings" class="success">Generate Pairings</button>
                    </div>
                </div>
            </div>
            
            <div id="pairings" class="tab-content">
                <div class="card">
                    <h2>Current Round: <span id="current-round">0</span></h2>
                    <div id="pairings-list"></div>
                </div>
            </div>
            
            <div id="standings" class="tab-content">
                <div class="card">
                    <h2>Tournament Standings</h2>
                    <table id="standings-table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Name</th>
                                <th>Rating</th>
                                <th>Score</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <div style="margin-top: 20px;">
                        <button id="refresh-standings">Refresh Standings</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // API Endpoints (assuming backend is running on localhost:5000)
        const API_URL = 'http://localhost:5000/api';

        // DOM Elements
        const playerForm = document.getElementById('player-form');
        const playerNameInput = document.getElementById('player-name');
        const playerRatingInput = document.getElementById('player-rating');
        const playersTableBody = document.querySelector('#players-table tbody');
        const generatePairingsBtn = document.getElementById('generate-pairings');
        const pairingsList = document.getElementById('pairings-list');
        const currentRoundSpan = document.getElementById('current-round');
        const standingsTableBody = document.querySelector('#standings-table tbody');
        const refreshStandingsBtn = document.getElementById('refresh-standings');
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            loadPlayers();
            setupTabNavigation();
        });

        // Tab Navigation
        function setupTabNavigation() {
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.getAttribute('data-tab');
                    
                    // Remove active class from all tabs and contents
                    tabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    
                    // Add active class to selected tab and content
                    tab.classList.add('active');
                    document.getElementById(tabId).classList.add('active');
                    
                    // If switching to standings tab, refresh standings
                    if (tabId === 'standings') {
                        loadStandings();
                    } else if (tabId === 'pairings') {
                        loadCurrentRound();
                    } else if (tabId === 'registration') {
                        loadPlayers();
                    }
                });
            });
        }

        // Player Registration
        playerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const playerName = playerNameInput.value.trim();
            const playerRating = parseInt(playerRatingInput.value) || 0;
            
            if (!playerName) {
                alert('Player name is required');
                return;
            }
            
            try {
                const response = await fetch(`${API_URL}/players`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: playerName,
                        rating: playerRating
                    })
                });
                
                if (response.ok) {
                    playerNameInput.value = '';
                    playerRatingInput.value = '';
                    loadPlayers();
                } else {
                    const error = await response.json();
                    alert(`Error: ${error.error}`);
                }
            } catch (error) {
                alert(`Network error: ${error.message}`);
            }
        });

        // Load Players
        async function loadPlayers() {
            try {
                const response = await fetch(`${API_URL}/players`);
                const players = await response.json();
                
                renderPlayersTable(players);
            } catch (error) {
                alert(`Error loading players: ${error.message}`);
            }
        }

        // Render Players Table
        function renderPlayersTable(players) {
            playersTableBody.innerHTML = '';
            
            if (players.length === 0) {
                playersTableBody.innerHTML = '<tr><td colspan="4" style="text-align: center;">No players registered yet</td></tr>';
                return;
            }
            
            players.forEach(player => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${player.id}</td>
                    <td>${player.name}</td>
                    <td>${player.rating || 'Unrated'}</td>
                    <td>
                        <button class="danger" data-player-id="${player.id}">Remove</button>
                    </td>
                `;
                
                playersTableBody.appendChild(row);
            });
            
            // Add event listeners to delete buttons
            document.querySelectorAll('button[data-player-id]').forEach(button => {
                button.addEventListener('click', async () => {
                    const playerId = button.getAttribute('data-player-id');
                    
                    if (confirm(`Are you sure you want to remove this player?`)) {
                        try {
                            const response = await fetch(`${API_URL}/players/${playerId}`, {
                                method: 'DELETE'
                            });
                            
                            if (response.ok) {
                                loadPlayers();
                            } else {
                                const error = await response.json();
                                alert(`Error: ${error.error}`);
                            }
                        } catch (error) {
                            alert(`Network error: ${error.message}`);
                        }
                    }
                });
            });
        }

        // Generate Pairings
        generatePairingsBtn.addEventListener('click', async () => {
            try {
                const response = await fetch(`${API_URL}/pairings`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    currentRoundSpan.textContent = data.round;
                    
                    // Switch to pairings tab
                    const pairingsTab = document.querySelector('.tab[data-tab="pairings"]');
                    pairingsTab.click();
                    
                    renderPairings(data.pairings);
                } else {
                    const error = await response.json();
                    alert(`Error: ${error.error}`);
                }
            } catch (error) {
                alert(`Network error: ${error.message}`);
            }
        });

        // Load Current Round
        async function loadCurrentRound() {
            const round = parseInt(currentRoundSpan.textContent);
            
            if (round === 0) {
                pairingsList.innerHTML = '<p>No pairings generated yet. Go to Player Registration to generate pairings.</p>';
                return;
            }
            
            // In a real app, you'd fetch the current round's pairings from the server
            // For simplicity, we're assuming the pairings are already rendered
        }

        // Render Pairings
        function renderPairings(pairings) {
            pairingsList.innerHTML = '';
            
            if (pairings.length === 0) {
                pairingsList.innerHTML = '<p>No pairings for this round</p>';
                return;
            }
            
            pairings.forEach((pairing, index) => {
                const pairingCard = document.createElement('div');
                pairingCard.classList.add('pairing-card');
                
                const isBye = pairing.black.id === null;
                const resultButtons = !pairing.result && !isBye ? `
                    <div class="result-buttons">
                        <button class="result-btn" data-index="${index}" data-result="1-0">1-0</button>
                        <button class="result-btn" data-index="${index}" data-result="1/2-1/2">½-½</button>
                        <button class="result-btn" data-index="${index}" data-result="0-1">0-1</button>
                    </div>
                ` : '';
                
                pairingCard.innerHTML = `
                    <div class="pairing-players">
                        <span>${pairing.white.name} (${pairing.white.rating || 'Unrated'})</span>
                        <span class="vs">vs</span>
                        <span>${pairing.black.name}${isBye ? '' : ` (${pairing.black.rating || 'Unrated'})`}</span>
                    </div>
                    ${pairing.result ? `<div>Result: ${pairing.result}</div>` : resultButtons}
                `;
                
                pairingsList.appendChild(pairingCard);
            });
            
            // Add event listeners to result buttons
            document.querySelectorAll('.result-btn').forEach(button => {
                button.addEventListener('click', async () => {
                    const pairingIndex = button.getAttribute('data-index');
                    const result = button.getAttribute('data-result');
                    
                    try {
                        const response = await fetch(`${API_URL}/results`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                round: parseInt(currentRoundSpan.textContent),
                                pairingIndex: parseInt(pairingIndex),
                                result: result
                            })
                        });
                        
                        if (response.ok) {
                            // Reload pairings
                            loadCurrentRound();
                            // Also refresh standings
                            loadStandings();
                        } else {
                            const error = await response.json();
                            alert(`Error: ${error.error}`);
                        }
                    } catch (error) {
                        alert(`Network error: ${error.message}`);
                    }
                });
            });
        }

        // Load Standings
        async function loadStandings() {
            try {
                const response = await fetch(`${API_URL}/standings`);
                const standings = await response.json();
                
                renderStandings(standings);
            } catch (error) {
                alert(`Error loading standings: ${error.message}`);
            }
        }

        // Render Standings
        function renderStandings(standings) {
            standingsTableBody.innerHTML = '';
            
            if (standings.length === 0) {
                standingsTableBody.innerHTML = '<tr><td colspan="4" style="text-align: center;">No players in tournament</td></tr>';
                return;
            }
            
            standings.forEach((player, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${player.name}</td>
                    <td>${player.rating || 'Unrated'}</td>
                    <td>${player.score}</td>
                `;
                
                standingsTableBody.appendChild(row);
            });
        }

        // Refresh Standings
        refreshStandingsBtn.addEventListener('click', loadStandings);
    </script>
</body>
</html>
